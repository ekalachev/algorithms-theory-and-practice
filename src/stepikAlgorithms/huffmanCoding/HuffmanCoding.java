/*
	–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –•–∞—Ñ—Ñ–º–∞–Ω–∞
	–ü–æ –¥–∞–Ω–Ω–æ–π –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–µ ùë† –¥–ª–∏–Ω—ã –Ω–µ –±–æ–ª–µ–µ 10^4, —Å–æ—Å—Ç–æ—è—â–µ–π –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞,
	–ø–æ—Å—Ç—Ä–æ–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–µ—Å–ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –∫–æ–¥. –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—É–∫–≤ ùëò,
	–≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, –∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëò —Å—Ç—Ä–æ–∫–∞—Ö
	–∑–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥—ã –±—É–∫–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "letter: code". –í –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
 */
package stepikAlgorithms.huffmanCoding;

import java.util.*;

public class HuffmanCoding {
	public String encode(String sourceStr) {
		Map<Character, Integer> count = new HashMap<>();

		for (Character c : sourceStr.toCharArray()) {
			if (count.containsKey(c)) {
				count.put(c, count.get(c) + 1);
			} else	 {
				count.put(c, 1);
			}
		}

		Map<Character, Node> charNodes = new HashMap<>();
		PriorityQueue<Node> priorityQueue = new PriorityQueue<>();

		for (Map.Entry<Character, Integer> entry : count.entrySet()) {
			Node node = new LeafNode(entry.getKey(), entry.getValue());
			priorityQueue.add(node);
			charNodes.put(entry.getKey(), node);
		}

		while (priorityQueue.size() > 1) {
			Node first = priorityQueue.poll();
			Node second = priorityQueue.poll();

			priorityQueue.add(new InternalNode(first, second));
		}

		Node root = priorityQueue.poll();
		if (count.size() == 1) {
			root.buildcode("0");
		} else {
			root.buildcode("");
		}

		StringBuilder strBuilder = new StringBuilder();
		for (Character c : sourceStr.toCharArray()) {
			strBuilder.append(charNodes.get(c).code);
		}

		return strBuilder.toString();
	}
}
