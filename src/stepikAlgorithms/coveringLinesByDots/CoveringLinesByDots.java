/*
    –ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–∫—Ä—ã—Ç—å –æ—Ç—Ä–µ–∑–∫–∏ —Ç–æ—á–∫–∞–º–∏

    –ü–æ –¥–∞–Ω–Ω—ã–º ùëõ –æ—Ç—Ä–µ–∑–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞,
    –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∞–∂–¥—ã–π –∏–∑ –æ—Ç—Ä–µ–∑–∫–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∏–∑ —Ç–æ—á–µ–∫.

    –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–Ω–æ —á–∏—Å–ª–æ 1‚â§ùëõ‚â§100 –æ—Ç—Ä–µ–∑–∫–æ–≤. –ö–∞–∂–¥–∞—è –∏–∑ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ –¥–≤–∞ —á–∏—Å–ª–∞ 0 <= n <= 100,
    –∑–∞–¥–∞—é—â–∏—Ö –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –æ—Ç—Ä–µ–∑–∫–∞. –í—ã–≤–µ–¥–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëö —Ç–æ—á–µ–∫ –∏ —Å–∞–º–∏ ùëö —Ç–æ—á–µ–∫.
    –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤ —Ç–æ—á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –∏–∑ –Ω–∏—Ö.
 */
package stepikAlgorithms.coveringLinesByDots;

import javafx.scene.shape.Line;

import java.util.ArrayList;
import java.util.Comparator;

public class CoveringLinesByDots {
    ArrayList<Double> cover(ArrayList<Line> arr){
        arr.sort(Comparator.comparingDouble(line -> line.getEndX()));

        ArrayList<Double> points = new ArrayList<>();
        double p = arr.get(0).getEndX();
        points.add(p);

        while(arr.size() > 0) {
            if(arr.get(0).getStartX() <= p)
                arr.remove(0);
            else {
                p = arr.get(0).getEndX();
                points.add(p);
            }
        }

        return points;
    }
}
