/*
	–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –•–∞—Ñ—Ñ–º–∞–Ω–∞
	–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ –µ—ë –∫–æ–¥—É –∏ –±–µ—Å–ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–º—É –∫–æ–¥—É —Å–∏–º–≤–æ–ª–æ–≤. 
	–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω—ã –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ùëò –∏ ùëô —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	—Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—É–∫–≤, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏—Ö—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, –∏ —Ä–∞–∑–º–µ—Ä –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏,
	—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ. –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëò —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–ø–∏—Å–∞–Ω—ã –∫–æ–¥—ã –±—É–∫–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "letter: code".
	–ù–∏ –æ–¥–∏–Ω –∫–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –¥—Ä—É–≥–æ–≥–æ. –ë—É–∫–≤—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.
	–í –∫–∞—á–µ—Å—Ç–≤–µ –±—É–∫–≤ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ª–∏—à—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞; –∫–∞–∂–¥–∞—è –∏–∑ —ç—Ç–∏—Ö –±—É–∫–≤
	–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑. –ù–∞–∫–æ–Ω–µ—Ü, –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
	—Å—Ç—Ä–æ–∫–∞. –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –∫–æ–¥—ã –≤—Å–µ—Ö –±—É–∫–≤ –Ω–µ–ø—É—Å—Ç—ã. –ó–∞–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫–æ–≤, —á—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
	–∏–º–µ–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä.

	–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É ùë†. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ
	–∞–ª—Ñ–∞–≤–∏—Ç–∞. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –¥–ª–∏–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç 10^4 —Å–∏–º–≤–æ–ª–æ–≤.
 */
package stepicAlgorithms.huffmanDecoding;

import java.util.*;

public class HuffmanDecoding {
	public String decode(Map<String, Character> dictionary, String encodedStr) {
		Queue<Character> queue = new LinkedList<>();
		
		for(char c: encodedStr.toCharArray()) {
			queue.add(c);
		}
		
		String result = "";		
		String encodedSymbol = "";
		
		while(!queue.isEmpty()) {
			encodedSymbol += queue.poll();
			
			Character symbol = dictionary.get(encodedSymbol);
			
			if(symbol != null) {
				encodedSymbol = "";
				result += symbol;
			}
		}
		
		return result;
	}
}
